import argparse
import os
import re
import cPickle as pickle
from config import monkeyConfig
from kinect_config import kinectConfig
from glob import glob
from ops import test_tf_kinect


def main(model_dir, ckpt_name):
    '''Skeleton script for preprocessing and
    passing kinect videos through a trained model'''
    # Find config from the trained model
    config = monkeyConfig()
    model_name = model_dir.split('/')[-1]
    config_file = os.path.join(
        config.npy_dir, '%s_config.p' % model_name)
    if os.path.exists(config_file):
        print 'Loading config from trained model.'
        with open(config_file, 'rb') as fp:
            config = pickle.load(fp)
    model_ckpt = os.path.join(model_dir, ckpt_name)
    kinect_config = kinectConfig()
    kinect_config = kinect_config[kinect_config['selected_video']]()
    monkey_files = glob(
        os.path.join(
            config.kinect_directory,
            config.kinect_project,
            '*%s' % config.kinect_file_ext))
    monkey_files = sorted(
        monkey_files, key=lambda name: int(
            re.search('\d+', name.split('/')[-1]).group()))
    if len(monkey_files) == 0:
        raise RuntimeError('Could not find any files!')
    frames = test_tf_kinect.get_and_trim_frames(monkey_files, 100, 35)

    # combine two frames to approximate the background
    bg = test_tf_kinect.static_background(
        frames,
        kinect_config['left_frame'],
        kinect_config['right_frame'])
    frames = [bg] + frames

    # threshold the depths and do some denoising
    frames = test_tf_kinect.threshold(
        frames,
        kinect_config['low_threshold'],
        kinect_config['high_threshold'],
        show_result=kinect_config['show_threshold_results'],
        denoise=True)

    # subtract background using MOG and display result
    # this will be very bad, since we're using such a high threshold
    # and doing a lot of openings and closings, but we are only going to
    # use it to estimate a good crop, so that's OK
    if kinect_config['run_gmm']:
        frames = test_tf_kinect.bgsub_frames(
            frames,
            kinect_config['bgsub_wraps'],
            kinect_config['bgsub_quorum'],
            show_result=kinect_config['show_mog_result'],
            mog_bg_threshold=kinect_config['bgsub_mog_bg_theshold'])

    # ignoring the frame generated by `static_background`, estimate
    # a good crop using the result of the MOG
    if kinect_config['crop'] == 'box':
        frames = test_tf_kinect.box_tracking(
            frames[1:],
            kinect_config['w'],
            kinect_config['h'],
            kinect_config['_x'],
            kinect_config['_y'],
            kinect_config['x_'],
            kinect_config['y_'],
            binaries=frames[1:],
            ignore_border_px=kinect_config['ignore_border_px'])
    elif kinect_config['crop'] == 'static':
        frames = [test_tf_kinect.crop_center(
            f, config.image_target_size[:2]) for f in frames]

    # Create preprocessed kinect movie if desired
    if kinect_config['kinect_output_name'] is not None:
        test_tf_kinect.create_movie(
            frames=frames,
            output=kinect_config['kinect_output_name'])

    # Transform kinect data to Maya data
    frames, frame_toss_index = test_tf_kinect.transform_to_renders(
        frames=frames,
        config=config)

    # Pass each frame through the CNN
    joint_predictions = test_tf_kinect.process_kinect_placeholder(
        model_ckpt=model_ckpt,
        kinect_data=frames,
        config=config)

    # Overlay joint predictions onto frames
    overlaid_frames = test_tf_kinect.overlay_joints_frames(
        frames=frames,
        joint_predictions=joint_predictions)

    # Create overlay movie if desired
    if kinect_config['predicted_output_name'] is not None:
        test_tf_kinect.create_movie(
            frames=overlaid_frames,
            output=kinect_config['predicted_output_name'])

    # Save results to a npz
    if kinect_config['output_npy_path'] is not None:
        files_to_save = {
            'overlaid_frames': overlaid_frames,
            'joint_predictions': joint_predictions,
            'frames': frames,
            'kinect_config': kinect_config,
            'model_config': config,
            'frame_toss_index': frame_toss_index
        }
        test_tf_kinect.save_to_numpys(
            file_dict=files_to_save,
            path=kinect_config['output_npy_path'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--model_dir",
        dest="model_dir",
        type=str,
        default='/media/data_cifs/monkey_tracking/results/' + \
        'TrueDepth100kStore/model_output/' + \
        'cnn_multiscale_high_res_low_res_skinny_pose_occlusion_2017_06_20_17_40_56',  # cnn_multiscale_high_res_low_res_skinny_pose_occlusion_2017_06_18_17_45_17
        help='Name of model directory.')
    parser.add_argument(
        "--ckpt_name",
        dest="ckpt_name",
        type=str,
        default='model_1000.ckpt-1000',  # 56000
        help='Name of TF checkpoint file.')
    args = parser.parse_args()
    main(**vars(args))
